//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client_App.CarService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Car", Namespace="http://schemas.datacontract.org/2004/07/CarShopAccessDB")]
    [System.SerializableAttribute()]
    public partial class Car : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime datField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string manufacturerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string modelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int powerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string trancemissionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double volumeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime dat {
            get {
                return this.datField;
            }
            set {
                if ((this.datField.Equals(value) != true)) {
                    this.datField = value;
                    this.RaisePropertyChanged("dat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                if ((object.ReferenceEquals(this.manufacturerField, value) != true)) {
                    this.manufacturerField = value;
                    this.RaisePropertyChanged("manufacturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string model {
            get {
                return this.modelField;
            }
            set {
                if ((object.ReferenceEquals(this.modelField, value) != true)) {
                    this.modelField = value;
                    this.RaisePropertyChanged("model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int power {
            get {
                return this.powerField;
            }
            set {
                if ((this.powerField.Equals(value) != true)) {
                    this.powerField = value;
                    this.RaisePropertyChanged("power");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string trancemission {
            get {
                return this.trancemissionField;
            }
            set {
                if ((object.ReferenceEquals(this.trancemissionField, value) != true)) {
                    this.trancemissionField = value;
                    this.RaisePropertyChanged("trancemission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double volume {
            get {
                return this.volumeField;
            }
            set {
                if ((this.volumeField.Equals(value) != true)) {
                    this.volumeField = value;
                    this.RaisePropertyChanged("volume");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        public int CompareTo(object c)
        {
            Car obj = (Car)c;
            if (this == null || obj == null)
                throw new ArgumentException("объект не объект");

            else
                switch (this.manufacturer.CompareTo(obj.manufacturer))
                {
                    case 1: return 1;
                    default: return -1;
                    case 0:
                        switch (this.model.CompareTo(obj.model))
                        {
                            case 1: return 1;
                            case 0: return 0;
                            default: return -1;
                        }
                }

        }

        public override string ToString()
        {
            string result = String.Format("ID={6} {0} , {1} , {2}, v={3:N1}, p={4}, Trancemission is {5}", manufacturer, model, dat.ToLongDateString(), volume, power, trancemission, id);
            return result;
        }


    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CarService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetList", ReplyAction="http://tempuri.org/IService1/GetListResponse")]
        Client_App.CarService.Car[] GetList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetList", ReplyAction="http://tempuri.org/IService1/GetListResponse")]
        System.Threading.Tasks.Task<Client_App.CarService.Car[]> GetListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        Client_App.CarService.Car[] Add(string s, Client_App.CarService.Car[] car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        System.Threading.Tasks.Task<Client_App.CarService.Car[]> AddAsync(string s, Client_App.CarService.Car[] car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Remove", ReplyAction="http://tempuri.org/IService1/RemoveResponse")]
        Client_App.CarService.Car[] Remove(Client_App.CarService.Car[] l, int iD);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Remove", ReplyAction="http://tempuri.org/IService1/RemoveResponse")]
        System.Threading.Tasks.Task<Client_App.CarService.Car[]> RemoveAsync(Client_App.CarService.Car[] l, int iD);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Edit", ReplyAction="http://tempuri.org/IService1/EditResponse")]
        Client_App.CarService.Car[] Edit(Client_App.CarService.Car[] l, string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Edit", ReplyAction="http://tempuri.org/IService1/EditResponse")]
        System.Threading.Tasks.Task<Client_App.CarService.Car[]> EditAsync(Client_App.CarService.Car[] l, string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Save", ReplyAction="http://tempuri.org/IService1/SaveResponse")]
        void Save(Client_App.CarService.Car[] l);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Save", ReplyAction="http://tempuri.org/IService1/SaveResponse")]
        System.Threading.Tasks.Task SaveAsync(Client_App.CarService.Car[] l);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Sort", ReplyAction="http://tempuri.org/IService1/SortResponse")]
        Client_App.CarService.Car[] Sort(Client_App.CarService.Car[] l);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Sort", ReplyAction="http://tempuri.org/IService1/SortResponse")]
        System.Threading.Tasks.Task<Client_App.CarService.Car[]> SortAsync(Client_App.CarService.Car[] l);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client_App.CarService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client_App.CarService.IService1>, Client_App.CarService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client_App.CarService.Car[] GetList() {
            return base.Channel.GetList();
        }
        
        public System.Threading.Tasks.Task<Client_App.CarService.Car[]> GetListAsync() {
            return base.Channel.GetListAsync();
        }
        
        public Client_App.CarService.Car[] Add(string s, Client_App.CarService.Car[] car) {
            return base.Channel.Add(s, car);
        }
        
        public System.Threading.Tasks.Task<Client_App.CarService.Car[]> AddAsync(string s, Client_App.CarService.Car[] car) {
            return base.Channel.AddAsync(s, car);
        }
        
        public Client_App.CarService.Car[] Remove(Client_App.CarService.Car[] l, int iD) {
            return base.Channel.Remove(l, iD);
        }
        
        public System.Threading.Tasks.Task<Client_App.CarService.Car[]> RemoveAsync(Client_App.CarService.Car[] l, int iD) {
            return base.Channel.RemoveAsync(l, iD);
        }
        
        public Client_App.CarService.Car[] Edit(Client_App.CarService.Car[] l, string s) {
            return base.Channel.Edit(l, s);
        }
        
        public System.Threading.Tasks.Task<Client_App.CarService.Car[]> EditAsync(Client_App.CarService.Car[] l, string s) {
            return base.Channel.EditAsync(l, s);
        }
        
        public void Save(Client_App.CarService.Car[] l) {
            base.Channel.Save(l);
        }
        
        public System.Threading.Tasks.Task SaveAsync(Client_App.CarService.Car[] l) {
            return base.Channel.SaveAsync(l);
        }
        
        public Client_App.CarService.Car[] Sort(Client_App.CarService.Car[] l) {
            return base.Channel.Sort(l);
        }
        
        public System.Threading.Tasks.Task<Client_App.CarService.Car[]> SortAsync(Client_App.CarService.Car[] l) {
            return base.Channel.SortAsync(l);
        }
    }
}
